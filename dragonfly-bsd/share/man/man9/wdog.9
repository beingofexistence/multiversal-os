.\"
.\" Copyright (c) 2012
.\"	The DragonFly Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\" 3. Neither the name of The DragonFly Project nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific, prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
.\" FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
.\" COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
.\" AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd May 6, 2012
.Dt WDOG 9
.Os
.Sh NAME
.Nm wdog_register ,
.Nm wdog_unregister
.Nd watchdog facility
.Sh SYNOPSIS
.In sys/wdog.h
.Bd -literal
typedef int (wdog_fn)(void *, int);
.Ed
.Ft void
.Fn wdog_register "struct watchdog *wd"
.Ft void
.Fn wdog_unregister "struct watchdog *wd"
.Sh DESCRIPTION
The
.Fn wdog_register
and
.Fn wdog_unregister
functions do just what their names indicate.
.Pp
The watchdog driver, such as
.Xr ichwd 4 ,
initializes a
.Vt struct watchdog
(see
.In sys/wdog.h
for details) and passes a pointer to it to
.Fn wdog_register .
The
.Nm wdog
framework will then periodically call the function pointed to by the struct's
.Fa wdog_fn
member and passes two arguments: a generic pointer specified in
.Vt struct watchdog Ap s
.Fa arg
member and an integer which is the desired period.
In the function, the driver must tickle the watchdog hardware and return
the period, which it can adjust if hardware specifics require that.
.Pp
Registered watchdogs should be unregistered with
.Fn wdog_unregister
upon driver detachment.
.\".Sh SEE ALSO
.\".Xr wdog 4
.Sh HISTORY
The
.Nm wdog
framework appeared in
.Dx 2.5 .
.Sh AUTHORS
.An Alex Hornung
