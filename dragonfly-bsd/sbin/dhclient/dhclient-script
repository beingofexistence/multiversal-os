#!/bin/sh
#
# $OpenBSD: src/sbin/dhclient/Attic/dhclient-script,v 1.23 2012/09/18 18:27:55 krw Exp $
#
# Copyright (c) 2003 Kenneth R Westerback <krw@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#

#
# Helper functions that implement common actions.
#

delete_old_address() {
	if [ -n "$old_ip_address" ]; then
		ifconfig $interface inet $old_ip_address delete
		#route delete "$old_ip_address" 127.0.0.1 >/dev/null 2>&1
	fi
	if [ -n "$old_classless_routes" ]; then
		fill_classless_routes "$old_classless_routes"
		set $classless_routes
		while [ $# -gt 1 ]; do
			route delete "$1" "$2"
			shift; shift
		done
		return 0;
	fi
}

add_new_address() {
	ifconfig $interface \
		inet $new_ip_address \
		netmask $new_subnet_mask \
		broadcast $new_broadcast_address

	# XXX Original TIMEOUT code did not do this unless $new_routers was set?
	#route add $new_ip_address 127.0.0.1 >/dev/null 2>&1
}

fill_classless_routes() {
	set $1
	while [ $# -ge 5 ]; do
		if [ $1 -eq 0 ]; then
			route="default"
		elif [ $1 -le 8 ]; then
			route="$2.0.0.0/$1"
			shift
		elif [ $1 -le 16 ]; then
			route="$2.$3.0.0/$1"
			shift; shift
		elif [ $1 -le 24 ]; then
			route="$2.$3.$4.0/$1"
			shift; shift; shift
		else
			route="$2.$3.$4.$5/$1"
			shift; shift; shift; shift
		fi
		shift
		router="$1.$2.$3.$4"
		classless_routes="$classless_routes $route $router"
		shift; shift; shift; shift
	done
}

delete_old_routes() {
	arp -dan
}

add_new_routes() {
	# RFC 3442: If the DHCP server returns both a Classless Static
	# Routes option and a Router option, the DHCP client MUST ignore
	# the Router option.
	#
	# DHCP clients that support this option (Classless Static Routes)
	# MUST NOT install the routes specified in the Static Routes
	# option (option code 33) if both a Static Routes option and the
	# Classless Static Routes option are provided.

	if [ -n "$new_classless_routes" ]; then
		fill_classless_routes "$new_classless_routes"
		$LOGGER "New Classless Static Routes ($interface): $classless_routes"
		set $classless_routes
		while [ $# -gt 1 ]; do
			if [ "0.0.0.0" = "$2" ]; then
				route add "$1" -iface "$interface"
			else
				route add "$1" "$2"
			fi
			shift; shift
		done
		return
	fi

	for router in $new_routers; do
		route -q delete default
		if [ "$new_ip_address" = "$router" ]; then
			route -q add default -iface $router
		else
			route -q add default $router
		fi
		# 2nd and subsequent default routers error out, so explicitly
		# stop processing the list after the first one.
		break
	done
}

add_new_resolv_conf() {
	# Create resolv.conf when either $new_domain_name_servers or
	# $new_domain_name are provided. As reported in PR#3135, some ISPs
	# provide only $new_domain_name_servers.

	local tmpres="/var/run/dhclient-resolv.conf.$interface"

	rm -f "$tmpres"

	if [ -n "$new_domain_name" ]; then
		echo "search $new_domain_name" >>"$tmpres"
	fi

	if [ -n "$new_domain_name_servers" ]; then
		for nameserver in $new_domain_name_servers; do
			echo "nameserver $nameserver" >>"$tmpres"
		done
	fi

	if [ -f "$tmpres" ]; then
		/sbin/resolvconf -a "$interface.dhcp" <"$tmpres"
		rm -f "$tmpres"
	else
		/sbin/resolvconf -d "$interface.dhcp" -f
	fi

	return 0
}

#
# Start of active code.
#

case $reason in
MEDIUM)
	# Not called by OpenBSD dhclient(8).
	;;

PREINIT)
	# Not called by OpenBSD dhclient(8).
	;;

ARPSEND)
	# Not called by OpenBSD dhclient(8).
	exit 1
	;;

ARPCHECK)
	# Not called by OpenBSD dhclient(8).
	# Always succeed. i.e. accept lease.
	;;

BOUND|RENEW|REBIND|REBOOT)
	if [ -n "$old_ip_address" ]; then
		if [ "$old_ip_address" != "$new_ip_address" ]; then
			delete_old_address
			delete_old_routes
		fi
	fi
	if [ "$reason" = BOUND ] ||
	   [ "$reason" = REBOOT ] ||
	   [ -z "$old_ip_address" ] ||
	   [ "$old_ip_address" != "$new_ip_address" ]; then
		add_new_address
		add_new_routes
	fi
	add_new_resolv_conf
	;;

EXPIRE|FAIL)
	if [ -n "$old_ip_address" ]; then
		delete_old_address
		delete_old_routes
	fi
	/sbin/resolvconf -d "$interface.dhcp" -f
	;;

TIMEOUT)
	add_new_address
	sleep 1
	if [ -n "$new_routers" ]; then
		set "$new_routers"
		if ping -q -c 1 -w 1 "$1"; then
			add_new_routes
			if add_new_resolv_conf; then
				exit 0
			fi
		fi
	fi
	ifconfig $interface inet $new_ip_address delete
	# XXX Why not a delete_old_address as before all other invocations of
	#     delete_old_routes?
	delete_old_routes
	exit 1
	;;
esac

exit 0
