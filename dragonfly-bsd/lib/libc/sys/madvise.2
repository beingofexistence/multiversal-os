.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)madvise.2	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/sys/madvise.2,v 1.17.2.8 2003/01/06 23:33:59 trhodes Exp $
.\"
.Dd May 4, 2019
.Dt MADVISE 2
.Os
.Sh NAME
.Nm madvise ,
.Nm posix_madvise ,
.Nm mcontrol
.Nd give advice about use of memory
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In sys/types.h
.In sys/mman.h
.Ft int
.Fn madvise "void *addr" "size_t len" "int behav"
.Ft int
.Fn posix_madvise "void *addr" "size_t len" "int behav"
.Ft int
.Fn mcontrol "void *addr" "size_t len" "int behav" "off_t value"
.Sh DESCRIPTION
The
.Fn madvise
system call
allows a process that has knowledge of its memory behavior
to describe it to the system.
The
.Fn posix_madvise
interface is identical and is provided for standards conformance.
The
.Fn mcontrol
system call is an extension of
.Fn madvise
that takes an additional
.Fa value
argument (see the description of the
.Dv MADV_SETMAP
behavior below).
.Pp
The known behaviors are:
.Bl -tag -width ".Dv MADV_SEQUENTIAL"
.It Dv MADV_NORMAL
Tells the system to revert to the default paging
behavior.
.It Dv MADV_RANDOM
Is a hint that pages will be accessed randomly, and prefetching
is likely not advantageous.
.It Dv MADV_SEQUENTIAL
Causes the VM system to depress the priority of
pages immediately preceding a given page when it is faulted in.
.It Dv MADV_WILLNEED
Causes pages that are in a given virtual address range
to temporarily have higher priority, and if they are in
memory, decrease the likelihood of them being freed.  Additionally,
the pages that are already in memory will be immediately mapped into
the process, thereby eliminating unnecessary overhead of going through
the entire process of faulting the pages in.  This WILL NOT fault
pages in from backing store, but quickly map the pages already in memory
into the calling process.
.It Dv MADV_DONTNEED
Allows the VM system to decrease the in-memory priority
of pages in the specified range.  Additionally future references to
this address range will incur a page fault.
.It Dv MADV_FREE
Gives the VM system the freedom to free pages,
and tells the system that information in the specified page range
is no longer important.  This is an efficient way of allowing
.Xr malloc 3
to free pages anywhere in the address space, while keeping the address space
valid.  The next time that the page is referenced, the page might be demand
zeroed, or might contain the data that was there before the
.Dv MADV_FREE
call.
References made to that address space range will not make the VM system
page the information back in from backing store until the page is
modified again.
.It Dv MADV_NOSYNC
Request that the system not flush the data associated with this map to
physical backing store unless it needs to.  Typically this prevents the
filesystem update daemon from gratuitously writing pages dirtied
by the VM system to physical disk.  Note that VM/filesystem coherency is
always maintained, this feature simply ensures that the mapped data is
only flush when it needs to be, usually by the system pager.
.Pp
This feature is typically used when you want to use a file-backed shared
memory area to communicate between processes (IPC) and do not particularly
need the data being stored in that area to be physically written to disk.
With this feature you get the equivalent performance with mmap that you
would expect to get with SysV shared memory calls, but in a more controllable
and less restrictive manner.  However, note that this feature is not portable
across
.Ux
platforms (though some may do the right thing by default).
For more information see the
.Dv MAP_NOSYNC
section of
.Xr mmap 2
.It Dv MADV_AUTOSYNC
Undoes the effects of
.Dv MADV_NOSYNC
for any future pages dirtied within the
address range.  The effect on pages already dirtied is indeterminate - they
may or may not be reverted.  You can guarantee reversion by using the
.Xr msync 2
or
.Xr fsync 2
system calls.
.It Dv MADV_NOCORE
Region is not included in a core file.
.It Dv MADV_CORE
Include region in a core file.
.It Dv MADV_INVAL
Invalidate the hardware page table for a region of memory, forcing
accesses to re-fault the pages.
This command is primarily meant to be used in areas of memory
governed by a virtual page table after modifications have been made
to it.
.It Dv MADV_SETMAP
Set the offset of the page directory page to
.Fa value
for the virtual page table governing
the specified area of memory.  The entire memory area under virtual page table
management should be specified.  You may encounter unexpected effects
if you only set the page directory page for part of the mapping.
.El
.Pp
Portable programs that call the
.Fn posix_madvise
interface should use the aliases
.Dv POSIX_MADV_NORMAL , POSIX_MADV_SEQUENTIAL ,
.Dv POSIX_MADV_RANDOM , POSIX_MADV_WILLNEED ,
and
.Dv POSIX_MADV_DONTNEED
rather than the flags described above.
.Sh RETURN VALUES
.Rv -std madvise posix_madvise mcontrol
.Sh ERRORS
The
.Fn madvise ,
.Fn posix_madvise ,
and
.Fn mcontrol
functions will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa behav
argument is not valid or the virtual address range specified by the
.Fa addr
and
.Fa len
arguments is not valid.
.El
.Sh SEE ALSO
.Xr mincore 2 ,
.Xr mprotect 2 ,
.Xr msync 2 ,
.Xr munmap 2 ,
.Xr posix_fadvise 3
.Sh STANDARDS
The
.Fn posix_madvise
interface conforms to
.St -p1003.1-2001 .
.Sh HISTORY
The
.Fn madvise
function first appeared in
.Bx 4.4 .
The
.Fn mcontrol
function was added in
.Dx 1.7 .
